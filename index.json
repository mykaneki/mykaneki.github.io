[{"content":"","date":"2023-01-03","permalink":"/","section":"Documentation","summary":"","title":"Documentation"},{"content":"","date":"2023-01-03","permalink":"/docs/","section":"Docs","summary":"","title":"First Post"},{"content":"","date":"2023-01-03","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"2023-01-03","permalink":"/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","section":"Tags","summary":"","title":"计算机网络"},{"content":"chapter 1 Computer Networks and the Internet\u003e chapter 1 Computer Networks and the Internet # chapter 1 Computer Networks and the Internet\ninterconnects 互相连接\nIntranet 内网\ntwisted-pair copper wire 双绞铜线\na coaxial cable 同轴电缆\nfiber optics 光纤\ndigital satellite channel 数字卫星信道\nguided media 导引性介质\ngeostationary satellite 地球静止卫星\nlow-altitude satellite 低空卫星\nlow-earth orbiting 近地轨道\nmessage 报文 （应用层）\nframes 帧 （链路层）\nSegments 报文段 （传输层）\nDatagrams 数据报 / 分组（网络层）\nbit streams 比特流 （物理层）\ncircuit-switched networks 电路交换网络\npacket Switching 分组交换\noverwhelms 淹没\nCongestion control 拥塞控制\nStore-and-forward transmission 存储转发传输\nreceive the entire packet before it can begin to transmit the first bit of the packet onto the outbound link（出站链路）.\nprocessing delay 处理时延\npropagation delay 传播时延（和距离有关）\nexamine 核验\ntraffic intensity 流量强度\nfraction 比率\nloosely classified into three categories 大致划分为三种类型\nno greater than 不大于\nequivalent concept 相同的概念\nresidential access 住宅接入\ndistributed applications 分布式应用程序\ncorporate 公司\nconnection-oriented 面向连接的\nanalog signals 模拟信号\nproper order 按序\ngridlock 交通堵塞\napproaches 构建\nalong a path 保留一条链路 （电路交换的特点）\ndemand 需要\nas a consequence 因此\nChapter 2 Application Layer\u003e Chapter 2 Application Layer # Chapter 2 Application Layer\nis labeled as 被标记为\nclient process: process that initiates communication.\nserver process:process that waits to be contracted.\nloss-tolerant application 遗失容忍性App\nreal-time audio/video(实时音视频)\nstored audio/video（存储音视频）\ninteractive games.（互动游戏）\nbandwidth-sensitive 带宽敏感\nelastic application 弹性应用（对吞吐量要求不高）\nunderlying transport protocol 基础传输协议\npersistent connection without pipelining 流水线持久连接\nRTT的计算\non the behalf of 代表\nparallel 并行\nparameter 参数\npush 推 pull 拉\nstateless\nPOP3\nHost aliasing 主机别名\nMail server aliasing 邮件服务器别名\nLoad distribution 负载分配\noverlay network 覆盖网络\nQuery Flooding 洪泛查询\nincentive priorities 激励优先\nparallel downloading 并行下载\nraise 增加 reduce 减少\nrecipient’s 收件人的\nphases 状态\nauthorization, transaction and update 授权 事务 更新\nhighly scalable 高可扩展性\nspecifies 指定\nindicates 指出\nsession 会话\ndistinguish 区分\nChapter 3 Transport Layer\u003e Chapter 3 Transport Layer # Chapter 3 Transport Layer\nmultiplexing and demultiplexing 多路复用和多路分解 corrupt 破坏 cumilative 累加的 full duplex 全双工 perceive congestion 感知拥塞 either A or B A或B forwarding and filtering 转发和过滤（链路层交换机） swiching and routing 交换和路由（网络层路由器） MSS maximum segment 最大报文段长度 MTU maximum transmission unit 链路层最大帧长度 grab 抓取 employs 使用 reassembles 重新组装 finer 出色的 detection 检测 correct 更正 plot 图 threshold 阈值 latency 延迟 chapter 4\u003e chapter 4 # topology 拓扑 reassemly 重组 知识点\u003e 知识点 # 端口\u003e 端口 # 20 and 21 FTP 22 SSH 25 SMTP 53 DNS 80 HTTP 443 HTTPS 110 POP3 network architecture\u003e network architecture # CS\nP2P\nCB\nnetwork architecture is fixed. 网络架构是固定的。\nnetwork architecture provides a specific set of services to application.\n网络体系结构为应用程序提供了一组特定的服务。\nThe network architecture is designed by application developer.\n网络体系结构由应用程序开发人员设计。\n有无状态\u003e 有无状态 # 有状态\nFTP SMTP 无状态\nhttp POP3 各层的服务对象\u003e 各层的服务对象 # 应用层——应用——报文 传输层——进程——报文段 网络层——端——数据报、分组 链路层——各种结点，如：路由器——帧 物理层————比特流 port number\u003e port number # 范围 0-65535 固定 0-1023 socket 信息\u003e socket 信息 # tcp 目标IP+目标socket+源IP+源socket （4 tuple） udp 目标IP+目标socket （2 tuple） 一个进程可以对应多个socket，但是一个socket只能对应一个进程 若两个udp报文段有不同源，但只要目标相同，都通过同一个socket rdt演变\u003e rdt演变 # rdt 1.0 完全可靠信道 rdt 2.0 具有比特差错，假设ACK和NAK无损 使用ACK和NAK建立自动重传请求ARQ 停等协议：每发送一个分组都要接受端的确认信号 rdt 2.1 解决rdt 2.0 信号受损 给分组设置序号 rdt 2.2 只有ACK没有NAK rdt 3.0 比特差错和分组丢失 超时重传 rdt 3.0 改良 rdt3.0性能太低 引入流水线协议 差错恢复（GBN\\SR） TCP\u003e TCP # 服务\u003e 服务 # 提供 reliable transport ; flow control; congestion control; connection-oriented. 不提供 timing、delay guarantee minimum throughput guarantee; security 标志\u003e 标志 # SYN 连接建立 FIN 连接释放 特点\u003e 特点 # 点对点，不能多播 全双工 三次握手 确保客户端活跃 四次挥手 因为是全双工 UDP\u003e UDP # 头部字段 source port number destination port number length checksum 校验和\u003e 校验和 # 1110 0110 0110 0110 ①\n1101 0101 0101 0101 ②\n1 1011 1011 1011 1011 ①+②\n1011 1011 1011 1100 反卷\n去掉头部的1\n整体再加1\n0100 0100 0100 0011 ③校验和结果\n验证：①+②+③ = 全1（没出错）\nMSS MTU的关系\u003e MSS MTU的关系 # MSS的大小根据MTU的大小确认\nMSS + TCP\\IP首部长度 \u0026lt;= MTU\n往返时间估计\u003e 往返时间估计 # EST RTT = (1-a) EST RTT + a * Sam RTT\nSam RTT 一次往返时间\n接收窗口计算\u003e 接收窗口计算 # rwnd = RcvBuffer - （LastByteRcvd - LastByteRead）\n","date":"2023-01-03","permalink":"/posts/%E8%AE%A1%E7%BD%91%E8%8B%B1%E6%96%87%E5%A4%8D%E4%B9%A0/","section":"文章列表","summary":"chapter 1 Computer Networks and the Internet\u003e chapter 1 Computer Networks and the Internet # chapter 1 Computer Networks and the Internet\ninterconnects 互相连接\nIntranet 内网\ntwisted-pair copper wire 双绞铜线","title":"计网英文复习"},{"content":"","date":"2023-01-03","permalink":"/posts/","section":"文章列表","summary":"","title":"文章列表"},{"content":"","date":"2023-01-03","permalink":"/series/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"2022-09-03","permalink":"/tags/docker/","section":"Tags","summary":"","title":"docker"},{"content":"","date":"2022-09-03","permalink":"/docs/","section":"Docs","summary":"","title":"Docs"},{"content":"","date":"2022-09-03","permalink":"/tags/git/","section":"Tags","summary":"","title":"git"},{"content":"","date":"2022-09-03","permalink":"/tags/kali/","section":"Tags","summary":"","title":"kali"},{"content":"","date":"2022-09-03","permalink":"/tags/linux/","section":"Tags","summary":"","title":"linux"},{"content":"","date":"2022-09-03","permalink":"/tags/wsl/","section":"Tags","summary":"","title":"wsl"},{"content":"git安装与配置\u003e git安装与配置 # git下载\n配置账号信息\n# git config --global user.name \u0026#34;kaneki_my\u0026#34; # git config --global user.email \u0026#34;2795188612@qq.com\u0026#34; # ssh-keygen -t rsa -C \u0026#34;2795188612@qq.com\u0026#34; 到git仓库，添加秘钥\n查看密钥存放路径\n​\t将.pub 的内容复制到github上\nGitHub上的git文档 git-tips/README.md at master · kwshare/git-tips (github.com)\n注意本地仓库和远程仓库位置的设置\nWin-KeX kali-WSL\u003e Win-KeX kali-WSL # Win-KeX | Kali Linux Documentation\n图形界面启动命令 ​\tkex --win -s\n​\tkex --sl -s\n​\tkex --esm --ip -s 远程桌面连接 password:kali\n修改root密码\nsudo passwd root\npassword:root\n一些小问题\u003e 一些小问题 # 点击图标打不开wireshark，但是命令行可以\n使用命令：sudo wireshark\n如何使得普通用户能够启动wireshark?\n将dumpcap的用户组更改为 wireshark\nsudo chgrp wireshark /usr/bin/dumpcap\n设置其他用户也具有与root一样的权限来执行dumpcap\nsudo chmod 4755 /usr/bin/dumpcap\n将自身加入到wireshark组中,笔者的用户名为Jello,因此命令如下:\nsudo gpasswd -a Jello wireshark\n配置WSL和宿主机互连，以及代理设置\n修改防火墙规则（每次使用都要运行）\nNew-NetFirewallRule -DisplayName \u0026quot;WSL\u0026quot; -Direction Inbound -InterfaceAlias \u0026quot;vEthernet (WSL)\u0026quot; -Action Allow\nname :{a64653d0-836e-4b5f-b6f0-dc1d058edca7}\n然后会在Windows的防火墙高级设置的入站规则里会看到一条名为WSL的新规则\nvim ~/.local_profile\nexport windows_host=`cat /etc/resolv.conf|grep nameserver|awk \u0026#39;{print $2}\u0026#39;` export ALL_PROXY=socks5://$windows_host:8888 export HTTP_PROXY=$ALL_PROXY export http_proxy=$ALL_PROXY export HTTPS_PROXY=$ALL_PROXY export https_proxy=$ALL_PROXY if [ \u0026#34;`git config --global --get proxy.https`\u0026#34; != \u0026#34;socks5://$windows_host:8888\u0026#34; ]; then git config --global proxy.https socks5://$windows_host:8888 fi 在powershell上固定kali终端\n点击设置 \u0026raquo; 左下角打开json文件 \u0026raquo; 进行编辑 { \u0026#34;commandline\u0026#34;: \u0026#34;wsl -d kali-linux kex --esm --wtstart -s\u0026#34;, \u0026#34;guid\u0026#34;: \u0026#34;{a64653d0-836e-4b5f-b6f0-dc1d058edca7}\u0026#34;, \u0026#34;hidden\u0026#34;: false, \u0026#34;icon\u0026#34;: \u0026#34;file:///C:/Users/27951/kali-menu.png\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Win-KeX\u0026#34;, \u0026#34;startingDirectory\u0026#34;: \u0026#34;//wsl$/kali-linux/home/kali\u0026#34; }, { \u0026#34;commandline\u0026#34;: \u0026#34;wsl ~\u0026#34;, \u0026#34;guid\u0026#34;: \u0026#34;{a64653d0-836e-4b5f-b6f0-dc1d058edca8}\u0026#34;, \u0026#34;hidden\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;kali\u0026#34;, \u0026#34;startingDirectory\u0026#34;: \u0026#34;%USERPROFILE%\u0026#34; } } kali虚拟机的安装和配置\u003e kali虚拟机的安装和配置 # 安装VMware\n阿里云盘分享\nVMware激活密钥（通用批量永久激活许可）\n16：ZF3R0-FHED2-M80TY-8QYGC-NPKYF\n15：FC7D0-D1YDL-M8DXZ-CYPZE-P2AY6\n12：ZC3TK-63GE6-481JY-WWW5T-Z7ATA\n10：1Z0G9-67285-FZG78-ZL3Q2-234JG\n下载kali镜像\n官网（解压即用）：https://kali.download/virtual-images/kali-2022.2/kali-linux-2022.2-vmware-amd64.7z\n清华：https://mirrors.tuna.tsinghua.edu.cn/kali-images/kali-2022.2/kali-linux-2022.2-installer-amd64.iso\n更改分辨率（字太小了）\nsettings -\u0026gt; display\n换源\u003e 换源 # 备份原先镜像源 sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup\n一键更换（更换成功的话后续操作就不需要了）\nsudo sed -i \u0026quot;s@http://http.kali.org@https://mirrors.tuna.tsinghua.edu.cn@g\u0026quot; /etc/apt/sources.list\n输入sudo vim /etc/apt/sources.list 命令进入源地址文件\n按i进入插入模式\n选择以下任何一个源，复制\ndeb http://http.kali.org/kali kali-rolling main non-free contrib deb-src http://http.kali.org/kali kali-rolling main non-free contrib #tsinghua 清华 deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free deb-src http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free #aliyun 阿里云 deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #ustc 中科大 deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib #浙大源 deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free 更新前把系统自带的更新源注释或者删除掉\nEsc退出插入模式\n输入:wq保存退出\n最后分开输入sudo apt-get update和sudo apt-get upgrade两个命令，更新软件和升级\n或者apt-get update \u0026amp;\u0026amp; apt-get upgrade \u0026amp;\u0026amp; apt-get dist-upgrade\n换语言\u003e 换语言 # dpkg-reconfigure locales 更换\n找到en_US.UTF-8 UTF-8选项，按空格键将其进行取消\n找到[ ]zh_CN.GBK_GBK 和[ ] zh-CN.UTF-8.UTF-8两个选项，使用空格将[ ]zh_CN.GBK_GBK 和[ ] zh-CN.UTF-8.UTF-8其两项勾选上\nreboot 重启\n将标准文件夹更新到当前语言吗？ 保留旧的名称\n打开ssh\u003e 打开ssh # 测试是否打开了ssh\nssh localhost 配置ssh\n打开配置文件vim /etc/ssh/sshd_config\n用于学习用途可以按以下配置\nPermitRootLogin yes # 是否允许root用户登录，实际工作需要设置为no PubkeyAuthentication yes # 是否开启基于公钥认证机制，有了公钥就可以免密登陆 PasswordAuthentication yes # 是否使用密码验证，如果使用密钥对验证可以关了它 PermitEmptyPasswords yes # 是否允许空密码，如果上面的那项是yes，这里最好设置no，但平时测试为了方便就设置了yes 重启服务\nservice ssh restart systemctl enable ssh xshell连接测试\nifconfig #查看IP地址 git配置（参考第一部分）\n安装docker\napt-get install docker docker-compose\n启动docker服务\nservice docker start\n配置加速器\nvim /etc/docker/daemon.json #写入内容 { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://xxx.mirror.aliyuncs.com\u0026#34;] } # https://cniirv3a.mirror.aliyuncs.com #重启 systemctl restart docker #设置docker开机自启 systemctl enable docker 其他公开Docker镜像加速源（无需注册）\nhttps://docker.mirrors.ustc.edu.cn\t#中科大\nhttp://hub-mirror.c.163.com/\t#网易\n虚拟机内软件\u003e 虚拟机内软件 # hackbar2.1.3 （火狐插件）\n链接：https://pan.baidu.com/s/1evk5Vkxruh22bNEl_4qMVg?pwd=zyeu 提取码：zyeu\nBurp_Suite_Pro_v1.7.37\n常用软件的安装与破解\u003e 常用软件的安装与破解 # VM\u003e VM # 安装VMware（见kali虚拟机的安装）\ntypora安装与破解\u003e typora安装与破解 # 「Typora1.3.8中文直装版.exe」https://www.aliyundrive.com/s/3ZTCfrrNJ27\n图床配置 Burp_Suite_Pro_v1.7.37\u003e Burp_Suite_Pro_v1.7.37 # 下载jdk8，选择Linux x86 Compressed Archive\n下载并解压缩\n#此处wget的非官方文件 wget https://www.iculture.cc/software/tools/jdk-8u191-linux-x64.tar.gz tar -xzvf jdk-8u191-linux-x64.tar.gz sudo cp -r jdk1.8.0_191 /opt cd /opt/jdk1.8.0_191 设置环境变量\n编辑启动文件 有的是bashrc 有的是zshrc\nvim ~/.zshrc 在最下方添加\n目录要跟自己下载的jdk版本对应，不能盲目照搬\n#install JAVA JDK export JAVA_HOME=/opt/jdk1.8.0_191 export CLASSPATH=.:${JAVA_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH 使其立即生效\nsource ~/.zshrc 安装\n# sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_191/bin/java 1 # sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_191/bin/javac 1 # sudo update-alternatives --set java /opt/jdk1.8.0_191/bin/java # sudo update-alternatives --set javac /opt/jdk1.8.0_191/bin/javac 验证版本\njava -version 安装burpsuite专业版\n下载\n命令行wget https://www.iculture.cc/software/tools/Burp_Suite_Pro_v1.7.37_Loader_Keygen.zip\n若失效\n「Burp_Suite_Pro_v1.7.37_Loader_Keygen」等文件 https://www.aliyundrive.com/s/3cNMHv1G4h5 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。\n解压缩\nunzip Burp_Suite_Pro_v1.7.37_Loader_Keygen.zip 将文件拷贝到/usr/bin目录中\nsudo cp -r burp-loader-keygen.jar burpsuite_pro_v1.7.37.jar /usr/bin 激活\n进入/usr/bin\ncd /usr/bin 启动激活程序(jar程序启动通用命令)\njava -jar burp-loader-keygen.jar 点击run\n点击next\n点击Manual activation完成手动激活\n设置快捷方式\n在/usr/bin中删除burpsuite社区版\ncd /usr/bin sudo rm -rf burpsuite 新建burpsuite\nvi burpsuite 设置如下内容\n#!/bin/sh java -Xbootclasspath/p:/usr/bin/burp-loader-keygen.jar -jar /usr/bin/burpsuite_pro_v1.7.37.jar 增加权限\nchmod +x burpsuite 进入/usr/share/applications\ncd /usr/share/applications 编辑burpsuite快捷方式\nvi kali-burpsuite.desktop 找到Exec=sh -c一行\nExec=sh -c \u0026#34;java -jar /usr/bin/burpsuite\u0026#34; 修改为\nExec=sh -c \u0026#34;/usr/bin/burpsuite\u0026#34; 修改效果如图，请注意这里引号是英文的，别手抖打错了\ndocker desktop\u003e docker desktop # 配置镜像\n获取自己的镜像地址\n容器镜像服务 (aliyun.com)\n写入docker-setting\n测试是否成功\ndocker info 以特权程序创建和运行容器，便于使用服务\ndocker run -d --name centos --privileged=true centos:centos7 /usr/sbin/init docker exec -it centos /bin/bash docker centos\u003e docker centos # docker pull centos:latest Linux中必备常用支持库的安装\n在CentOS安装软件的时候，可能缺少一部分支持库，而报错。这里首先安装系统常用的支持库。那么在安装的时候就会减少很多的错误的出现。\n# yum install -y epel-release # yum install -y gcc gdb strace gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs patch e2fsprogs-devel krb5-devel libidn libidn-devel openldap-devel nss_ldap openldap-clients openldap-servers libevent-devel libevent uuid-devel uuid mysql-devel 安装vim\nyum -y install vim* 配置vim\nvim /etc/vimrc\n找个位置添加以下代码\nset su set showmode set ruler set autoindent syntax on :wq 保存并退出 卸载\nyum remove -y vim*\n安装ifconfig 、firewall、nmcli 、nmtui\nyum install net-tools.x86_64 yum install firewalld firewall-config yum install NetworkManager yum install NetworkManager-tui 防火墙的关闭\nsystemctl stop firewalld systemctl disable firewalld.service WSL捣腾日记\u003e WSL捣腾日记 # bug真的多，重试第三次，再不行就换Ubuntu\n卸载子系统\u003e 卸载子系统 # 注销\nwsl --unregister kali-linux\n下载kali-linux\u003e 下载kali-linux # 点击打开，设置username和password\n可以直接设置root密码\nsudo -i\npasswd root\n重复输入两次密码：root\n根据kali官网文档 Win-KeX | Kali Linux Documentation\n下载桌面版\nsudo apt update\nsudo apt install -y kali-win-kex\n第一次bug\nping命令有问题\n第二次bug\n在安装了完整版kali后，出现浏览器打不开的情况\n第三次重装\nping依旧有问题\n第四次\n商店安装\n设置初始username和password\n更新源\n测试，kali可以ping\n安装桌面版\n测试，kali不可以ping但是root可以，并且浏览器可以打开\n解决普通用户不能ping但是root可以的问题\n原因分析：\nping命令在运行中采用了ICMP协议，需要发送ICMP报文。但是只有root用户才能建立ICMP报文。而正常情况下，ping命令的权限应为-rwsr-xr-x，即带有suid的文件，一旦该权限被修改，则普通用户无法正常使用该命令。\n解决方案：\n使用root用户执行\nchmod u+s /bin/ping\n换源\n编辑 /etc/apt/sources.list 文件\ndeb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free-contrib # deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free-contrib sudo apt-get update \u0026amp;\u0026amp; apt-get upgrade \u0026amp;\u0026amp; apt-get dist-upgrade\n安装完整版kali\nsudo apt install -y kali-linux-large\n安装LxRunOffline\u003e 安装LxRunOffline # 可以迁移WSL的安装目录\n参考教程\nLxRunOffline使用手册 | 0opsdc (oopsdc.com)\n发布 ·DDoSolitary/LxRunOffline (github.com)\n下载 LxRunOffline-v3.5.0-msvc.zip\n解压文件到C:\\Windows\\System32\n命令行输入lxrunoffline，检测是否安装成功\n遇到了一个bug，删除了注册表，然后貌似一个问题解决了，又出现了新的问题\n问题链接\n[ ERROR] Couldn\u0026rsquo;t get the value \u0026ldquo;DistributionName\u0026rdquo; of the registry key \u0026ldquo;Software\\Microsoft\\Windows\\CurrentVersion\\Lxss\\TryStoreWSL\u0026rdquo;. · Issue #195 · DDoSolitary/LxRunOffline (github.com)\n使用离线包安装ubuntu\n如果是从微软官方下载WSL离线包，文件后缀为.appx，我们手动改为.zip，然后解压，install.tar.gz就是我们后续使用的安装文件。\nlxrunoffline i -s -n \u0026lt;WSL名称\u0026gt; -d \u0026lt;安装路径\u0026gt; -f \u0026lt;安装包路径\u0026gt;.tar.gz\nlxrunoffline i -s -n ubuntu-linux -d E://WSL -f E:\\Users\\27951\\Downloads\\Compressed\\CanonicalGroupLimited.UbuntuonWindows_2004.2021.825.0\\Ubuntu_2004.2021.825.0_ARM64\\install.tar.gz\n-s 参数表示在桌面创建WSL快捷图标\n不出意外，就出意外了\n报错\n我猜这个是因为注册表的问题\n解决不了，弃用\n安装Windows Subsystem for Linux\u003e 安装Windows Subsystem for Linux # 更新wsl\nwsl.exe \u0026ndash;update\n商店Ubuntu20.04\u003e 商店Ubuntu20.04 # 设置账号密码\n换源\nsudo sed -i \u0026#34;s@http://.*archive.ubuntu.com@https://mirrors.tuna.tsinghua.edu.cn@g\u0026#34; /etc/apt/sources.list sudo sed -i \u0026#34;s@http://.*security.ubuntu.com@https://mirrors.tuna.tsinghua.edu.cn@g\u0026#34; /etc/apt/sources.list 更新源\napt update\n安装图形界面\nsudo apt install -y xfce4 xrdp\n修改xrdp默认端口\nsudo vim /etc/xrdp/xrdp.ini # port=3390 为当前用户指定登录session类型\n注意这一步很重要,如果不设置的话会导致后面远程桌面连接上闪退\nsudo vim ~/.xsession # 写入下面内容(就一行) xfce4-session 启动xrdp\u003e 启动xrdp # 由于WSL2里面不能用systemd,所以需要手动启动\nsudo /etc/init.d/xrdp start #正常的话，返回如下： * Starting Remote Desktop Protocol server 远程访问\n​ 在Windows系统中运行mstsc命令打开远程桌面连接,地址输入localhost:3390\n注意这里的端口号应当与上面修改配置中一致\n下载网络工具\nsudo apt install net-tools\n这个ping命令没有问题\n但是也打不开浏览器，奇奇怪怪\n卸载了\n局域网科学网络共享\u003e 局域网科学网络共享 # 把电脑的ip改为固定的ip\nclash打开局域网模式\n给手机配置代理\n","date":"2022-09-03","permalink":"/docs/%E9%87%8D%E8%A3%85%E7%94%B5%E8%84%91/","section":"Docs","summary":"git安装与配置\u003e git安装与配置 # git下载\n配置账号信息\n# git config --global user.name \u0026#34;kaneki_my\u0026#34; # git config --global user.email \u0026#34;2795188612@qq.com\u0026#34; # ssh-keygen -t rsa -C \u0026#34;2795188612@qq.com\u0026#34; 到git仓库，添加秘钥\n查看密钥存放路径\n​\t将.pub 的内容复制到github上\nGitHub上的git文档 git-tips/README.md at master · kwshare/git-tips (github.","title":"重装电脑"},{"content":"","date":"2021-01-03","permalink":"/tags/java/","section":"Tags","summary":"","title":"Java"},{"content":"","date":"2021-01-03","permalink":"/tags/sql/","section":"Tags","summary":"","title":"SQL"},{"content":"","date":"2021-01-03","permalink":"/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","section":"Tags","summary":"","title":"操作系统"},{"content":"","date":"2021-01-03","permalink":"/tags/%E5%86%85%E5%AD%98/","section":"Tags","summary":"","title":"内存"},{"content":"数组越界问题\u003e 数组越界问题 # int main(int argc, char* argv[]){ int i = 0; int arr[3] = {0}; for(; i\u0026lt;=3; i++){ arr[i] = 0; printf(\u0026#34;hello world\\n\u0026#34;); } return 0; } 疑问：这段代码的运行结果理论上是无限打印，实际上VS编译器中只打印了四次。\n在 C 语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。根据我们前面讲的数组寻址公式，a[3]也会被定位到某块不属于数组的内存地址上，而这个地址正好是存储变量 i 的内存地址，那么 a[3]=0 就相当于 i=0，所以就会导致代码无限循环。\n那么，为什么\u0026amp;arr[3]=\u0026amp;i呢？\n因为，函数体内的局部变量存在栈上，而且是连续压栈。在Linux进程的内存布局中，栈区在高地址，且从高向低增长，那么实际上arr和i在内存中的状态如下表所示。\narr[0] arr[1] arr[2] i 什么时候使用数组而不使用ArrayList等容器\u003e 什么时候使用数组而不使用ArrayList等容器 # 需要存储基本类型 对性能要求较高 需要表达多维时，数组比较直观 数据大小事先已知且操作简单 在多条件模糊查询的时候，如何确定SQL语句（实战技巧）\u003e 在多条件模糊查询的时候，如何确定SQL语句（实战技巧） # 如图，在这\u0026quot;businessAddress like '%\u0026quot;+businessAddress+\u0026quot;%'\u0026quot;句之前是否需要加and？\n解决：利用永真式1=1\nString sql = \u0026#34;select * from business where 1=1 \u0026#34;; if (businessName!=null\u0026amp;\u0026amp;!businessName.equals(\u0026#34;\u0026#34;)){//判断字符串是否为空 sql += \u0026#34;and businessName like \u0026#39;%\u0026#34;+businessName+\u0026#34;%\u0026#39;\u0026#34;; } if (businessAddress!=null\u0026amp;\u0026amp;!businessAddress.equals(\u0026#34;\u0026#34;)){//判断字符串是否为空 sql += \u0026#34;and businessAddress like \u0026#39;%\u0026#34;+businessAddress+\u0026#34;%\u0026#39;\u0026#34;; } String和StringBuffer的选用\u003e String和StringBuffer的选用 # String的字符串对象是字符串常量池里的，如果需要频繁的连接和改动的话，会导致很多不用的字符串常量被废弃\n此时，选用StringBuffer效率更高\nSQL查询\u003e SQL查询 # where写布尔表达式的注意事项\u003e where写布尔表达式的注意事项 # 找出与“Smith”居住在同一城市、同一街道的所有客户的名字。\n--正确 SELECT customer_name FROM customer WHERE Customer_street IN ( SELECT Customer_street FROM customer WHERE Customer_name = \u0026#39;Smith\u0026#39; ) AND Customer_city IN ( SELECT Customer_city FROM customer WHERE Customer_name = \u0026#39;Smith\u0026#39; ); --错误 where后并列查询不可以直接用逗号表示，用and Select customer_name from customer where Customer_street, Customer_city in ( select Customer_street, Customer_city from customer where Customer_name=’ Smith’ ); 操作系统\u003e 操作系统 # “访管”指令仅在用户态下使用，执行“访管”指令将用户态转变为核心态。因操作系统不允许用户直接执行某些“危险性高”的指令，因此用户态运行这些指令的结果会转成操作系统的核心态去运行。这个过程就是访管中断。\n中断处理流程的前三个步骤是由硬件直接实现（隐指令）的。地址映射中需要基地址（或页表）寄存器和地址加法器的支持。而在时钟管理中，需要硬件计数器保持时钟的运行。\n中断处理流程：\n中断请求\n每个中断源向CPU发出中断的时机是随机的； 内中断不能被屏蔽，外中断有可屏蔽和不可屏蔽之分 为了记录这些中断事件和区分不同的中断源，中断系统为每一个中断源设置了一个中断请求标志触发器。如果某个中断源发出了中断，就将相应的标志触发器置为1； 对于外中断，CPU统一在每条指令执行阶段结束前向中断控制器发出中断查询信号，去查询是否有中断请求要去处理。 中断判优先级\n如果有多个中断源发出了中断请求。则需要根据中断优先级选择优先级高的中断请求先进行响应 中断默认优先级是由一个硬件排队器来实现的 但是中断屏蔽字可以动态改变中断优先级。 中断响应\nCPU向中断源发出中断响应信号 关中断 保存断电（PC） 找到中断服务的入口地址（中断向量） 中断服务\n保存现场：通用寄存器和状态寄存器和屏蔽字 开中断 中断处理过程 关中断 恢复现场 开中断 中断返回 中断返回\n回到断电处 恢复硬件 继续执行原程序 中断程序本身可能是用户程序，但是进入中断的处理程序一定是OS程序。若被中断的是用户程序，则系统将从目态转入管态，在管态下进行中断的处理；若被中断的是低级中断，则仍然保持在管态，而用户程序只能在目态下运行，因此进入中断处理的程序只能是OS程序。\n计算机通过硬件中断机制完成由用户态到核心态的转换，核心态到用户态的转换是由操作系统程序执行后完成的。\n广义指令只能在核心态执行，广义指令就是系统调用。要分清调用和执行的区别，调用可能在用户态，执行一定在核心态。\n特权用户程序能够执行特权指令，这句话是错的，只有操作系统程序可以。\n下列选项中，不可能在用户态发生的事件是（C）。\n系统调用 外部中断 进程切换 缺页 1.系统调用可能在用户态和内核态发生，系统调用把应用程序的请求（用户态的请求）传入内核，由内核（内核态）处理请求并将结果返回给应用程序（用户态） 用户态-\u0026gt;核心态\n2.中断的发生与CPU当前的状态无关，既可以发生在用户态，又可以发生在内核态，因为无论系统处于何种状态都需要处理外部设备发来的中断请求。\n3.进程切换在核心态下完成，不能发生在用户态。原因：需要调度处理器和系统资源，为保证系统安全?\n4.缺页（异常）也是用户态-\u0026gt;内核态\nABD（系统调用中断异常）都是用户态转向内核态，而进程切换只能发生在内核态\n所以选C进程切换\n中断处理要保存而子程序不用保存的数据是PSW。因为子程序调用只需保存程序断点，即该指令的下一条指令的地址：中断处理不仅要保存断点(PC的内容)，还要保存程序状态字寄存器(PSW)的内容。在中断处理中，最重要的两个寄存器是PC和PSW。\n整数除以0会触发异常，会使得进程从用户态转向核心态\n外部中断处理过程，PC值由中断隐指令自动保存，而通用寄存器内容由操作系统保存。\n从用户态到内核态，系统调用、中断、异常\n执行系统调用的过程如下：正在运行的进程先传递系统调用参数，然后由焰入(trap)指令负责将用户态转换为内核态，并将返回地址压入堆栈以备后用，接下来CPU执行相应的内核态服务程序，最后返回用户态。\n当CPU检测到中断信号后会做些什么？由硬件自动保存被中断程序的断点(即程序计数器PC)。之后，硬件找到该中断信号对应的中断向量，中断向量指明中断服务程序入口地址(各中断向量统一存放在中断向量表中，该表由操作系统初始化)。接下来开始执行中断服务程序，包括保存PSW、保存中断屏蔽字、保存各通用寄存器的值，并提供与中断信号对应的中断服务，中断服务程序属于操作系统内核。\n","date":"2021-01-03","permalink":"/posts/%E7%BB%86%E8%8A%82%E6%88%96%E6%8A%80%E5%B7%A7/","section":"文章列表","summary":"数组越界问题\u003e 数组越界问题 # int main(int argc, char* argv[]){ int i = 0; int arr[3] = {0}; for(; i\u0026lt;=3; i++){ arr[i] = 0; printf(\u0026#34;hello world\\n\u0026#34;); } return 0; } 疑问：这段代码的运行结果理论上是无限打印，实际上VS编译器中只打印了四次。\n在 C 语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。根据我们前面讲的数组寻址公式，a[3]也会被定位到某块不属于数组的内存地址上，而这个地址正好是存储变量 i 的内存地址，那么 a[3]=0 就相当于 i=0，所以就会导致代码无限循环。","title":"细节或技巧"},{"content":"","date":"2020-11-03","permalink":"/tags/idea/","section":"Tags","summary":"","title":"idea"},{"content":"彻底删除idea项目\u003e 彻底删除idea项目 # remove module 手动删除文件夹 删除项目引用 使用Everything搜索找到 项目.contexts.zip和项目.tasks.zip两个文件，将其删除 idea快捷键\u003e idea快捷键 # 批量编辑 ：alt + shift+insert\n方法说明注释：输入/** ,点击“Enter”\n","date":"2020-11-03","permalink":"/posts/%E6%9D%82%E8%AE%B0/","section":"文章列表","summary":"彻底删除idea项目\u003e 彻底删除idea项目 # remove module 手动删除文件夹 删除项目引用 使用Everything搜索找到 项目.contexts.zip和项目.tasks.zip两个文件，将其删除 idea快捷键\u003e idea快捷键 # 批量编辑 ：alt + shift+insert\n方法说明注释：输入/** ,点击“Enter”","title":"杂记"},{"content":"","date":"0001-01-01","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"0001-01-01","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]
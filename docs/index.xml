<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on mykaneki's blog</title><link>https://mykaneki.github.io/docs/</link><description>Recent content in Docs on mykaneki's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 01 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mykaneki.github.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>小迪安全学习笔记-信息收集</title><link>https://mykaneki.github.io/docs/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://mykaneki.github.io/docs/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</guid><description>CDN相关技术> CDN相关技术 # CDN是什么？CDN对安全渗透有何影响？
CDN (Content Delivery Network) 是一种将网络内容分布到多个地理位置的技术。当用户访问网站时，CDN 会将数据从最近的服务器节点传递给用户，从而加快网站的加载速度。
CDN 技术对于安全渗透的影响，具体如下：
防御 DDoS 攻击： CDN 可以通过分布式网络架构来缓解 DDoS 攻击，因为攻击者需要同时针对多个节点发起攻击才能影响网站的可用性。 缩短攻击链： CDN 会将网站的内容存储在多个地理位置，因此攻击者需要绕过更多的网络跳转才能到达目标网站，这可能会使攻击者更难找到入口。 强制加密： CDN 一般提供了HTTPS 加密协议，这可以防止中间人攻击，并且可以防止攻击者拦截并篡改数据。 保护敏感信息： CDN 一般都有加密和隐私保护的措施来保护敏感信息，如防止跟踪和收集用户的数据。 然而，CDN技术也有它自身的风险，比如一些CDN服务商可能会将数据存储在不安全的地方，或者CDN服务商自己可能会被黑客攻击，使得数据泄露。所以需要选择合适的CDN服务商并且经常审计和监控。</description></item><item><title>小迪安全学习笔记-基础入门</title><link>https://mykaneki.github.io/docs/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>https://mykaneki.github.io/docs/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</guid><description>概念名词> 概念名词 # 域名> 域名 # 什么是域名
顶级域名、二级域名和多级域名
域名发现对安全测试的意义
旁站攻击 DNS> DNS # 什么是 DNS？
域名系统（Domain Name System）。它是一个域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用UDP端口53。对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。 本地 HOSTS 与 DNS 的关系？
Hosts在本地将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当我们访问域名时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。 Hosts地址：C:\Windows\System32\drivers\etc\hosts CDN 是什么？与 DNS 的关系？
CDN：是构建在数据网络上的一种分布式的内容分发网。可以提高系统的响应速度，也可以一定程度的拦截/防御攻击。 在攻击的时候，如果找不到源站，那么我们扫描的就是CDN节点中的缓存，是一种阻碍。 常见的 DNS 安全攻击有哪些？</description></item><item><title>docker命令</title><link>https://mykaneki.github.io/docs/docker%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://mykaneki.github.io/docs/docker%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>docker命令> docker命令 # 查看镜像
docker image ls
删除所有镜像
docker rmi $(docker images -q)
查看运行中的容器
docker ps
宿主机和容器间复制文件
从主机复制到容器sudo docker cp host_path containerID:container_path
从容器复制到主机sudo docker cp containerID:container_path host_path
停止并删除容器
docker stop &amp;lt;container id|name=``&amp;quot;&amp;quot;``&amp;gt;&amp;lt;/container&amp;gt;</description></item><item><title>计网英文复习</title><link>https://mykaneki.github.io/docs/%E8%AE%A1%E7%BD%91%E8%8B%B1%E6%96%87%E5%A4%8D%E4%B9%A0/</link><pubDate>Tue, 03 Jan 2023 17:48:29 +0800</pubDate><guid>https://mykaneki.github.io/docs/%E8%AE%A1%E7%BD%91%E8%8B%B1%E6%96%87%E5%A4%8D%E4%B9%A0/</guid><description>chapter 1 Computer Networks and the Internet> chapter 1 Computer Networks and the Internet # chapter 1 Computer Networks and the Internet
interconnects 互相连接
Intranet 内网
twisted-pair copper wire 双绞铜线</description></item><item><title>DVWA靶场</title><link>https://mykaneki.github.io/docs/dvwa/</link><pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate><guid>https://mykaneki.github.io/docs/dvwa/</guid><description>环境搭建> 环境搭建 # kali + docker
docker run --rm -it -p 80:80 vulnerables/web-dvwa 打开网页 http://127.0.0.1/index.php
点击Create / Reset database
Username：admin Password：password
安装及配置BurpSuite> 安装及配置BurpSuite # 下载所需要的文件
Releases · h3110w0r1d-y/BurpLoaderKeygen (github.com)
​ Burp Suite Release Notes (portswigger.</description></item><item><title>重装电脑</title><link>https://mykaneki.github.io/docs/%E9%87%8D%E8%A3%85%E7%94%B5%E8%84%91/</link><pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate><guid>https://mykaneki.github.io/docs/%E9%87%8D%E8%A3%85%E7%94%B5%E8%84%91/</guid><description>git安装与配置> git安装与配置 # git下载
配置账号信息
# git config --global user.name &amp;#34;kaneki_my&amp;#34; # git config --global user.email &amp;#34;2795188612@qq.com&amp;#34; # ssh-keygen -t rsa -C &amp;#34;2795188612@qq.com&amp;#34; 到git仓库，添加秘钥
查看密钥存放路径
​ 将.pub 的内容复制到github上
GitHub上的git文档 git-tips/README.md at master · kwshare/git-tips (github.</description></item><item><title>操作系统习题</title><link>https://mykaneki.github.io/docs/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate><guid>https://mykaneki.github.io/docs/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/</guid><description>第一章 习题> 第一章 习题 # 1. 判断以下命题是否正确，并说明理由。> 1. 判断以下命题是否正确，并说明理由。 # 设计操作系统的主要目标是什么？
方便性：使计算机更易于用户使用。 有效性：以有效的方式管理计算机系统的资源，合理地组织计算机的工作流程， 以防止对计算机资源的不当或错误使用。这是操作系统可用的关键因素。 可扩展性：为用户的的开发搭建一个平台，允许修改、并引进新的功能。 操作系统为计算机上所有软件的性能提高提供了平台，另外，操作系统提供了一系列功能用以支持用户程序的运行。 操作系统的基本功能是什么?
操作系统是用户和计算机硬件之间的接口。 操作系统是计算机系统资源的管理者。 操作系统用作扩充机器，使得裸机功能更强、更方便使用。 多道批处理系统形成和发展的主要动力是什么？
计算机体系的不断发展，需要不断提高计算机资源的利用率和系统吞吐量的需要。
推动分时操作系统形成和发展的主要动力是什么？
为了满足用户对人机交互的需求，出现了分时系统。
操作系统的结构大致可分为哪几类？UNIX 的结构有什么特点？
三类：整体、分层、微内核
UNIX是分层结构
优点 增加了系统的可读性和可适应性，简化了系统的设计和实现。 易于调试、修改、扩充、维护和保证正确性。 缺点 操作系统的效率不高。 层的定义较为困难。 第二章 习题> 第二章 习题 # 1.</description></item><item><title>操作系统学习笔记</title><link>https://mykaneki.github.io/docs/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate><guid>https://mykaneki.github.io/docs/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/</guid><description>1. 绪论> 1. 绪论 # 1.1 操作系统概述> 1.1 操作系统概述 # 1.1.1 操作系统的定义> 1.1.1 操作系统的定义 # Operating System 是指控制和管理整个计算机系统的硬件与软件资源，合理地组织和调度计算机的工作和资源的分配，进而为用户和其他软件提供方便接口与环境的程序集合。
操作系统是计算机系统中最基本的系统软件。
1.1.2 操作系统的功能> 1.1.2 操作系统的功能 # 操作系统是用户和计算机硬件之间的接口。
命令接口
联机命令接口（交互式命令接口）
适用于分时和实时操作系统
脱机命令接口（批处理命令接口）
适用于批处理系统</description></item><item><title>大数据基本配置和使用</title><link>https://mykaneki.github.io/docs/%E5%A4%A7%E6%95%B0%E6%8D%AE/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate><guid>https://mykaneki.github.io/docs/%E5%A4%A7%E6%95%B0%E6%8D%AE/</guid><description>集群配置> 集群配置 # kali+docker
选择一个目录存放git clone的目录，克隆项目
项目克隆前需要换源以及git ssh配置
cd ~/clonprj
git clone git@github.com:big-data-europe/docker-hadoop.git
cat docker-compose.yml 查看资源清单
version: &amp;#34;3&amp;#34; services: namenode: image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8 container_name: namenode restart: always ports: - 9870:9870 - 9000:9000 volumes: - hadoop_namenode:/hadoop/dfs/name environment: - CLUSTER_NAME=test env_file: - .</description></item><item><title>密码学学习笔记</title><link>https://mykaneki.github.io/docs/%E5%AF%86%E7%A0%81%E5%AD%A6/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate><guid>https://mykaneki.github.io/docs/%E5%AF%86%E7%A0%81%E5%AD%A6/</guid><description>1. 绪论> 1. 绪论 # 任何需要可信的第三方的计算，都可以舍弃第三方
1.1 Security Objectives> 1.1 Security Objectives # 保密性 Confidentiality
信息的非授权泄露
数据保密性 Data confidentiality
确保自己的隐私信息不在未授权的情况下透露给他人。
隐私性 Privacy
确保自己的隐私能够被自己控制，如：向谁授权，让其获得这些隐私。
完整性 Integrity
信息的非授权更改和毁坏
数据完整性 Data integrity
确保信息和程序只能以特定和授权的方式进行更改，避免信息的不恰当更改或破坏。</description></item><item><title>数据库系统概论-基础</title><link>https://mykaneki.github.io/docs/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/</link><pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate><guid>https://mykaneki.github.io/docs/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/</guid><description/></item><item><title>细节或技巧</title><link>https://mykaneki.github.io/docs/%E7%BB%86%E8%8A%82%E6%88%96%E6%8A%80%E5%B7%A7/</link><pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate><guid>https://mykaneki.github.io/docs/%E7%BB%86%E8%8A%82%E6%88%96%E6%8A%80%E5%B7%A7/</guid><description>数组越界问题> 数组越界问题 # int main(int argc, char* argv[]){ int i = 0; int arr[3] = {0}; for(; i&amp;lt;=3; i++){ arr[i] = 0; printf(&amp;#34;hello world\n&amp;#34;); } return 0; } 疑问：这段代码的运行结果理论上是无限打印，实际上VS编译器中只打印了四次。
在 C 语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。根据我们前面讲的数组寻址公式，a[3]也会被定位到某块不属于数组的内存地址上，而这个地址正好是存储变量 i 的内存地址，那么 a[3]=0 就相当于 i=0，所以就会导致代码无限循环。</description></item><item><title>杂记</title><link>https://mykaneki.github.io/docs/%E6%9D%82%E8%AE%B0/</link><pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate><guid>https://mykaneki.github.io/docs/%E6%9D%82%E8%AE%B0/</guid><description>彻底删除idea项目> 彻底删除idea项目 # remove module 手动删除文件夹 删除项目引用 使用Everything搜索找到 项目.contexts.zip和项目.tasks.zip两个文件，将其删除 idea快捷键> idea快捷键 # 批量编辑 ：alt + shift+insert
方法说明注释：输入/** ,点击“Enter”</description></item></channel></rss>